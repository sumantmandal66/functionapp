name: Deploy .NET 8.0 Isolated Function App

on:
  push:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose environment to deploy'
        required: true
        default: 'Dev'
        type: choice
        options:
          - dev
          - qa
          - uat
          - prod

env: 
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  RESOURCE_GROUP_NAME: $(jq -r ".resourceGroupName" ./bicep/modules/parameters/${{ github.event.inputs.environment }}parameter.json)
  functionAppName: $(jq -r ".functionAppName" ./bicep/modules/parameters/${{ github.event.inputs.environment }}parameter.json)


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up .NET 8.x SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x'
        
    -name: echo env params
     run:|
       echo "RESOURCE_GROUP_NAME :${{ RESOURCE_GROUP_NAME }}"
       echo "functionAppName :${{ functionAppName }}"
    # - name: Set environment variables
    #   id: set-env
    #   run: |
    #       RESOURCE_GROUP_NAME=$(jq -r ".resourceGroupName" ./bicep/modules/parameters/${ENVIRONMENT}parameter.json)
    #       echo "RESOURCE_GROUP_NAME=${RESOURCE_GROUP_NAME}" >> $GITHUB_ENV
    #       echo "resource_group_name=${RESOURCE_GROUP_NAME}" >> $GITHUB_OUTPUT
    #       echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

    # - name: Print environment variables
    #   run: |
    #       echo "Environment: ${ENVIRONMENT}"
    #       echo "Resource Group Name: ${RESOURCE_GROUP_NAME}"
    
    - name: Set project path
      run: echo "PROJECT_PATH=src/FunctionAppHTTP.csproj" >> $GITHUB_ENV

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: abc
      run: echo "$ {{ env.functionAppName }}"

    - name: Build the application
      run: dotnet build --configuration Release ${{ env.PROJECT_PATH }}

    - name: Publish the application
      run: dotnet publish --configuration Release --output ./publish ${{ env.PROJECT_PATH }} --self-contained false
    
    - name: Zip the published files
      run: |
        mkdir -p artifact
        # Zip only the contents of the publish folder, not the folder itself
        cd ./publish
        zip -r ../artifact/functionapp.zip .
      
    - name: Upload functionapp.zip artifact
      id: uploadzipartifact
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-zip
        path: ./artifact/functionapp.zip


    #- name: Publish artifact
     # uses: actions/upload-artifact@v4
      #with:
       # name: function-app-artifact
        #path: ./functionapp.zip

    # - name: Zip the published files
    #   run: |
    #     cd ./publish
    #     zip -r ../functionapp.zip .
    
    # - name: Publish artifact
    #  uses: actions/upload-artifact@v4
    #   with:
    #     name: function-app-artifact
    #     path: ./functionapp.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    #- name: Download functionapp.zip artifact
     # uses: actions/download-artifact@v4
      #with:
       # name: functionapp-zip
        #path: ./artifact

    - name: Set up Azure CLI
      uses: azure/cli@v1
      with:
        inlineScript: |
          az --version

    - name: Log in to Azure
      uses: azure/login@v2
      with:
        creds: >
              {
                "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
                "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
                "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}",
                "tenantId":"${{ secrets.AZURE_TENANT_ID }}"
              }
        enable-AzPSSession: true

    - name: Install Bicep
      run: az bicep install

    - name: check secrets
      run: |
          if [ -z "${{ secrets.AZUREWEBJOBSSTORAGE }}" ]; then
            echo "AZUREWEBJOBSSTORAGE is not set"
            exit 1
          fi          
 
    - name: Deploy Azure infrastructure with Bicep
      run: |
        fileContent=$(cat ./bicep/modules/parameters/${{ github.event.inputs.environment }}parameter.json)
    
        echo '
        {
          "AWSS3AcessKey": "${{ secrets.AWSS3ACESSKEY }}",
          "AWSS3SecretKey": "${{ secrets.AWSS3SECRETKEY }}",
          "storageConnectionString": "${{ secrets.AZUREWEBJOBSSTORAGE }}"
        }' >> inlineParams.json
    
    - name: Set file content
      run: |
        fileContent=$(cat ./bicep/modules/parameters/${{ github.event.inputs.environment }}parameter.json)
        echo "Contents of fileContent:"
        echo "$fileContent"  # This will print the contents of the file

    - name: Print inlineParams.json
      run: |
        echo "Contents of inlineParams.json:"
        cat inlineParams.json
  
    # - name: Print fileContent
    #   run: |
    #     echo "Contents of fileContent:"
    #     echo "$fileContent"

    - name: Combine parameters
      run: |
        combineParams=$(jq -s '.[0] * .[1]' ./bicep/modules/parameters/${{ github.event.inputs.environment }}parameter.json inlineParams.json)
        echo "Combined parameters:"
        echo "$combineParams"
        
    
        # cat mergedParameters.json
        
        # az deployment group create \
        #     --resource-group "${{ needs.build.outputs.resource_group_name }}" \
        #     --template-file ./bicep/modules/Function_APP.bicep \
        #     --parameters @mergedParameters.json      

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
         name: functionapp-zip  # The name of the artifact to download
         path: ./artifact       # The path where the artifact will be stored

    - name: Confirm Download Success
      run: |
        if [ -f ./artifact/functionapp.zip ]; then
          echo "Artifact download successful."
        else
          echo "Artifact download failed!" && exit 1
        fi

    # - name: Unzip the artifact
    #   run: |
    #    unzip ./artifact/functionapp.zip -d ./artifact

    #- name: Deploy Function to Azure
     # run: |
      #  az webapp deploy \
       #   --name "komatsu-func-app" \
        #  --resource-group "DefaultResourceGroup-NEU" \
         # --src-path ./publish/functionapp.zip

    #- name: Deploy Function App to Azure using Zip
     # run: |
      #  az functionapp deployment source config-zip \
       #  --name "komatsu-func-app" \
        # --resource-group "DefaultResourceGroup-NEU" \
         #--src ./functionapp.zip

    - name: Deploy to Azure Function
      run: |
        az functionapp deployment source config-zip \
        --name ${{ env.functionAppName }} \
        --resource-group ${{ env.resourceGroupName }} \
        --src ./artifact/functionapp.zip

    - name: Verify Deployment
      run: |
        az functionapp show \
        --name ${{ env.functionAppName }} \
        --resource-group ${{ env.resourceGroupName }} 
      
      # uses: azure/functions-action@v1
      # with:
      #   app-name: "komatsu-func-app"
      #   package: './artifact/functionapp.zip'
      #   publish-type: package
